{"version":3,"file":"index.esm.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at.\n *\n *      Http://www.apache.org/licenses/LICENSE-2.0.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @ignore\n */\ndeclare global {\n  interface Window {\n    __googleMapsCallback: (e: Event) => void;\n  }\n}\n\ntype Libraries = (\n  | \"drawing\"\n  | \"geometry\"\n  | \"localContext\"\n  | \"places\"\n  | \"visualization\"\n)[];\n\n/**\n * The Google Maps JavaScript API\n * [documentation](https://developers.google.com/maps/documentation/javascript/tutorial)\n * is the authoritative source for [[LoaderOptions]].\n */\nexport interface LoaderOptions {\n  /**\n   * See https://developers.google.com/maps/documentation/javascript/get-api-key.\n   */\n  apiKey: string;\n  /**\n   * To track usage across different applications using the same client ID,\n   * you may provide an optional channel parameter with your requests. By\n   * specifying different channel values for different aspects of your\n   * application, you can determine precisely how your application is used.\n   *\n   * For example, your externally-facing website may access the API using a\n   * channel set to customer while your internal marketing department may use\n   * a channel set to mkting. Your reports will break down usage by those\n   * channel values.\n   *\n   * Channel reporting is available for applications using the Maps JavaScript\n   * API, the image APIs or any of the Google Maps Platform web services.\n   *\n   * The channel parameter must use the following format:\n   *\n   * - Must be an ASCII alphanumeric string.\n   * - Period (.), underscore (_) and hyphen (-) characters are allowed.\n   * - The channel parameter is case-insensitive; upper-case, mixed-case, and\n   *   lower-cased channel parameters will be merged into their lower-case\n   *   equivalent. For example, usage on the `CUSTOMER` channel will be combined\n   *   with the usage on the `customer` channel.\n   * - The channel value must be a static value assigned per application\n   *   instance, and must not be generated dynamically. You may not use\n   *   channel values to track individual users, for example.\n   */\n  channel?: string;\n  /**\n   * In your application you can specify release channels or version numbers:\n   *\n   * The weekly version is specified with `version=weekly`. This version is\n   * updated once per week, and is the most current.\n   *\n   * ```\n   * const loader = Loader({apiKey, version: 'weekly'});\n   * ```\n   *\n   * The quarterly version is specified with `version=quarterly`. This version\n   * is updated once per quarter, and is the most predictable.\n   *\n   * ```\n   * const loader = Loader({apiKey, version: 'quarterly'});\n   * ```\n   *\n   * The version number is specified with `version=n.nn`. You can choose\n   * `version=3.40`, `version=3.39`, or `version=3.38`. Version numbers are\n   * updated once per quarter.\n   *\n   * ```\n   * const loader = Loader({apiKey, version: '3.40'});\n   * ```\n   *\n   * If you do not explicitly specify a version, you will receive the\n   * weekly version by default.\n   */\n  version?: string;\n  /**\n   * The id of the script tag. Before adding a new script, the Loader will check for an existing one.\n   */\n  id?: string;\n  /**\n   * When loading the Maps JavaScript API via the URL you may optionally load\n   * additional libraries through use of the libraries URL parameter. Libraries\n   * are modules of code that provide additional functionality to the main Maps\n   * JavaScript API but are not loaded unless you specifically request them.\n   *\n   * ```\n   * const loader = Loader({\n   *  apiKey,\n   *  libraries: ['drawing', 'geometry', 'places', 'visualization'],\n   * });\n   * ```\n   *\n   * Set the [list of libraries](https://developers.google.com/maps/documentation/javascript/libraries) for more options.\n   */\n  libraries?: Libraries;\n  /**\n   * By default, the Maps JavaScript API uses the user's preferred language\n   * setting as specified in the browser, when displaying textual information\n   * such as the names for controls, copyright notices, driving directions and\n   * labels on maps. In most cases, it's preferable to respect the browser\n   * setting. However, if you want the Maps JavaScript API to ignore the\n   * browser's language setting, you can force it to display information in a\n   * particular language when loading the Maps JavaScript API code.\n   *\n   * For example, the following example localizes the language to the United\n   * Kingdom:\n   *\n   * ```\n   * const loader = Loader({apiKey, language: 'ja', region: 'JP'});\n   * ```\n   *\n   * See the [list of supported\n   * languages](https://developers.google.com/maps/faq#languagesupport). Note\n   * that new languages are added often, so this list may not be exhaustive.\n   *\n   */\n  language?: string;\n  /**\n   * When you load the Maps JavaScript API from maps.googleapis.com it applies a\n   * default bias for application behavior towards the United States. If you\n   * want to alter your application to serve different map tiles or bias the\n   * application (such as biasing geocoding results towards the region), you can\n   * override this default behavior by adding a region parameter when loading\n   * the Maps JavaScript API code.\n   *\n   * The region parameter accepts Unicode region subtag identifiers which\n   * (generally) have a one-to-one mapping to country code Top-Level Domains\n   * (ccTLDs). Most Unicode region identifiers are identical to ISO 3166-1\n   * codes, with some notable exceptions. For example, Great Britain's ccTLD is\n   * \"uk\" (corresponding to the domain .co.uk) while its region identifier is\n   * \"GB.\"\n   *\n   * For example, the following example localizes the map to the United Kingdom:\n   *\n   * ```\n   * const loader = Loader({apiKey, region: 'GB'});\n   * ```\n   */\n  region?: string;\n  /**\n   * (Beta) You can add multiple Map IDs to your map using the map_ids paramenter in\n   * your bootstrap request.\n   */\n  mapIds?: string[];\n  /**\n   * Use a custom url and path to load the Google Maps API script.\n   */\n  url?: string;\n  /**\n   * Use a cryptographic nonce attribute.\n   */\n  nonce?: string;\n}\n\n/**\n * [[Loader]] makes it easier to add Google Maps JavaScript API to your application\n * dynamically using\n * [Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n * It works by dynamically creating and appending a script node to the the\n * document head and wrapping the callback function so as to return a promise.\n *\n * ```\n * const loader = new Loader({\n *   apiKey: \"\",\n *   version: \"weekly\",\n *   libraries: [\"places\"]\n * });\n *\n * loader.load().then(() => {\n *   const map = new google.maps.Map(...)\n * })\n * ```\n */\nexport class Loader {\n  /**\n   * See [[LoaderOptions.version]]\n   */\n  version: string;\n  /**\n   * See [[LoaderOptions.apiKey]]\n   */\n  apiKey: string;\n  /**\n   * See [[LoaderOptions.id]]\n   */\n  channel: string;\n  /**\n   * See [[LoaderOptions.channel]]\n   */\n  id: string;\n  /**\n   * See [[LoaderOptions.libraries]]\n   */\n  libraries: Libraries;\n  /**\n   * See [[LoaderOptions.language]]\n   */\n  language: string;\n\n  /**\n   * See [[LoaderOptions.region]]\n   */\n  region: string;\n\n  /**\n   * See [[LoaderOptions.mapIds]]\n   */\n  mapIds: string[];\n\n  /**\n   * See [[LoaderOptions.nonce]]\n   */\n  nonce: string | null;\n\n  /**\n   * See [[LoaderOptions.url]]\n   */\n  url: string;\n\n  private CALLBACK = \"__googleMapsCallback\";\n  private callbacks: ((e: Event) => void)[] = [];\n  private done = false;\n  private loading = false;\n  private onerrorEvent: Event;\n\n  /**\n   * Creates an instance of Loader using [[LoaderOptions]]. No defaults are set\n   * using this library, instead the defaults are set by the Google Maps\n   * JavaScript API server.\n   *\n   * ```\n   * const loader = Loader({apiKey, version: 'weekly', libraries: ['places']});\n   * ```\n   */\n  constructor({\n    apiKey,\n    channel,\n    id = \"__googleMapsScriptId\",\n    libraries = [],\n    language,\n    region,\n    version,\n    mapIds,\n    nonce,\n    url = \"https://maps.googleapis.com/maps/api/js\",\n  }: LoaderOptions) {\n    this.version = version;\n    this.apiKey = apiKey;\n    this.channel = channel;\n    this.id = id;\n    this.libraries = libraries;\n    this.language = language;\n    this.region = region;\n    this.mapIds = mapIds;\n    this.nonce = nonce;\n    this.url = url;\n  }\n  /**\n   * CreateUrl returns the Google Maps JavaScript API script url given the [[LoaderOptions]].\n   *\n   * @ignore\n   */\n  createUrl(): string {\n    let url = this.url;\n\n    url += `?callback=${this.CALLBACK}`;\n\n    if (this.apiKey) {\n      url += `&key=${this.apiKey}`;\n    }\n\n    if (this.channel) {\n      url += `&channel=${this.channel}`;\n    }\n\n    if (this.libraries.length > 0) {\n      url += `&libraries=${this.libraries.join(\",\")}`;\n    }\n\n    if (this.language) {\n      url += `&language=${this.language}`;\n    }\n\n    if (this.region) {\n      url += `&region=${this.region}`;\n    }\n\n    if (this.version) {\n      url += `&v=${this.version}`;\n    }\n\n    if (this.mapIds) {\n      url += `&map_ids=${this.mapIds.join(\",\")}`;\n    }\n\n    return url;\n  }\n\n  /**\n   * Load the Google Maps JavaScript API script and return a Promise.\n   */\n  load(): Promise<void> {\n    return this.loadPromise();\n  }\n\n  /**\n   * Load the Google Maps JavaScript API script and return a Promise.\n   *\n   * @ignore\n   */\n  loadPromise(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.loadCallback((err: Event) => {\n        if (!err) {\n          resolve();\n        } else {\n          reject(err);\n        }\n      });\n    });\n  }\n\n  /**\n   * Load the Google Maps JavaScript API script with a callback.\n   */\n  loadCallback(fn: (e: Event) => void): void {\n    this.callbacks.push(fn);\n    this.execute();\n  }\n\n  /**\n   * Set the script on document.\n   */\n  private setScript(): void {\n    if (this.id && document.getElementById(this.id)) {\n      this.callback();\n      return;\n    }\n\n    const url = this.createUrl();\n    const script = document.createElement(\"script\");\n    script.id = this.id;\n    script.type = \"text/javascript\";\n    script.src = url;\n    script.onerror = this.loadErrorCallback.bind(this);\n    script.defer = true;\n    script.async = true;\n\n    if (this.nonce) {\n      script.nonce = this.nonce;\n    }\n\n    document.head.appendChild(script);\n  }\n\n  private loadErrorCallback(e: Event): void {\n    this.onerrorEvent = e;\n    this.callback();\n  }\n\n  private setCallback(): void {\n    window.__googleMapsCallback = this.callback.bind(this);\n  }\n\n  private callback(): void {\n    this.done = true;\n    this.loading = false;\n\n    this.callbacks.forEach((cb) => {\n      cb(this.onerrorEvent);\n    });\n\n    this.callbacks = [];\n  }\n\n  private execute(): void {\n    if (this.done) {\n      this.callback();\n    } else {\n      if (this.loading) {\n        // do nothing but wait\n      } else {\n        this.loading = true;\n        this.setCallback();\n        this.setScript();\n      }\n    }\n  }\n}\n"],"names":[],"mappings":"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"}